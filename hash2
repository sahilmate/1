class Pair:
    def __init__(self, key, value):
        self.key = key
        self.value = value

class Dictionary:
    def __init__(self, size=11):
        self.size = size
        self.table = [[] for _ in range(size)]

    def hash_function(self, key):
        return hash(key) % self.size

    def insert(self, key, value):
        index = self.hash_function(key)
        for pair in self.table[index]:
            if pair.key == key:
                pair.value = value
                return
        self.table[index].append(Pair(key, value))

    def search(self, key):
        index = self.hash_function(key)
        for pair in self.table[index]:
            if pair.key == key:
                return pair.value
        return None

    def delete(self, key):
    index = self.hash_function(key)
    chain = self.table[index]
    for i in range(len(chain)):
        if chain[i].key == key:
            del chain[i]
            return
    print("Key not found")


    def display(self):
    print("Dictionary:")
    for i in range(len(self.table)):
        print(f"Index {i}: ", end="")
        for pair in self.table[i]:
            print(f"[{pair.key}: {pair.value}]", end=" -> ")
        print("None")
    print()


d = Dictionary()

while True:
    print("\n1. Insert")
    print("2. Search")
    print("3. Delete")
    print("4. Display")
    print("5. Exit")

    choice = input("Enter your choice: ")

    if choice == '1':
        key = input("Enter key: ")
        value = input("Enter value: ")
        d.insert(key, value)
    elif choice == '2':
        key = input("Enter key to search: ")
        value = d.search(key)
        if value is not None:
            print("Value:", value)
        else:
            print("Key not found")
    elif choice == '3':
        key = input("Enter key to delete: ")
        d.delete(key)
        print("Key deleted successfully")
    elif choice == '4':
        d.display()
    elif choice == '5':
        print("Exiting...")
        break
    else:
        print("Invalid choice")
